{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/chart.service\";\nexport class DataMoneyDirective {\n  constructor(chartService, renderer, el) {\n    this.chartService = chartService;\n    this.renderer = renderer;\n    this.el = el;\n  }\n  ngOnInit() {}\n  mouseenter() {\n    console.log(\"OMG It's a Mouse!!!\");\n    this.chartService.getDataCharts().subscribe(data => {\n      console.log(data);\n      const arr = [];\n      for (let i = 0; i < data.length; i++) {\n        arr.push(data[i].percent);\n      }\n      const max = Math.max(...arr);\n      console.log(max);\n      console.log(this.perce);\n      if (max === this.perce) {\n        console.log(max);\n        this.renderer.setStyle(this.el.nativeElement, 'background-color', 'hsl(186, 34%, 60%)');\n      }\n    });\n  }\n  mouseleave() {\n    this.renderer.setStyle(this.el.nativeElement, 'background-color', 'hsl(186, 34%, 60%)');\n  }\n}\nDataMoneyDirective.ɵfac = function DataMoneyDirective_Factory(t) {\n  return new (t || DataMoneyDirective)(i0.ɵɵdirectiveInject(i1.ChartService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nDataMoneyDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: DataMoneyDirective,\n  selectors: [[\"\", \"appDataMoney\", \"\"]],\n  hostBindings: function DataMoneyDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function DataMoneyDirective_mouseenter_HostBindingHandler() {\n        return ctx.mouseenter();\n      })(\"mouseleave\", function DataMoneyDirective_mouseleave_HostBindingHandler() {\n        return ctx.mouseleave();\n      });\n    }\n  },\n  inputs: {\n    perce: \"perce\"\n  }\n});","map":{"version":3,"mappings":";;AAeA,OAAM,MAAOA,kBAAkB;EAE7BC,YACUC,YAA0B,EAC1BC,QAAmB,EACnBC,EAAc;IAFd,iBAAY,GAAZF,YAAY;IACZ,aAAQ,GAARC,QAAQ;IACR,OAAE,GAAFC,EAAE;EACT;EACHC,QAAQ,IAER;EAEAC,UAAU;IACRC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,IAAI,CAACN,YAAY,CAACO,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MACnDJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;MACjB,MAAMC,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACpCD,GAAG,CAACG,IAAI,CAACJ,IAAI,CAACE,CAAC,CAAC,CAACG,OAAO,CAAC;;MAE3B,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGL,GAAG,CAAC;MAC5BL,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;MAChBV,OAAO,CAACC,GAAG,CAAC,IAAI,CAACW,KAAK,CAAC;MACvB,IAAIF,GAAG,KAAK,IAAI,CAACE,KAAK,EAAE;QACtBZ,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;QAChB,IAAI,CAACd,QAAQ,CAACiB,QAAQ,CACpB,IAAI,CAAChB,EAAE,CAACiB,aAAa,EACrB,kBAAkB,EAClB,oBAAoB,CACrB;;IAEL,CAAC,CAAC;EACJ;EAEAC,UAAU;IACR,IAAI,CAACnB,QAAQ,CAACiB,QAAQ,CACpB,IAAI,CAAChB,EAAE,CAACiB,aAAa,EACrB,kBAAkB,EAClB,oBAAoB,CACrB;EACH;;AAvCWrB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAuB;EAAAC;IAAA;;eAAlBC,gBAAY;MAAA;QAAA,OAAZA,gBAAY;MAAA","names":["DataMoneyDirective","constructor","chartService","renderer","el","ngOnInit","mouseenter","console","log","getDataCharts","subscribe","data","arr","i","length","push","percent","max","Math","perce","setStyle","nativeElement","mouseleave","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["D:\\Programmation\\frameworks\\Angular\\frontend Mentor\\expensesChart\\src\\app\\directives\\data-money.directive.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  OnInit,\n  Renderer2,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\nimport { ChartService } from '../services/chart.service';\n\n@Directive({\n  selector: '[appDataMoney]',\n})\nexport class DataMoneyDirective implements OnInit {\n  @Input() perce!: any;\n  constructor(\n    private chartService: ChartService,\n    private renderer: Renderer2,\n    private el: ElementRef\n  ) {}\n  ngOnInit(): void {\n    \n  }\n  @HostListener('mouseenter')\n  mouseenter() {\n    console.log(\"OMG It's a Mouse!!!\");\n    this.chartService.getDataCharts().subscribe((data) => {\n      console.log(data);\n      const arr = [];\n      for (let i = 0; i < data.length; i++) {\n        arr.push(data[i].percent);\n      }\n      const max = Math.max(...arr);\n      console.log(max);\n      console.log(this.perce);\n      if (max === this.perce) {\n        console.log(max);\n        this.renderer.setStyle(\n          this.el.nativeElement,\n          'background-color',\n          'hsl(186, 34%, 60%)'\n        );\n      }\n    });\n  }\n  @HostListener('mouseleave')\n  mouseleave() {\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background-color',\n      'hsl(186, 34%, 60%)'\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}